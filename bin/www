#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("netcheck-server:server");
const https = require("https");
const WebSocket = require("ws");
const getTracerouteData = require("../src/traceroute.js");
const ping = require("../src/ping.js");
const port = normalizePort(process.env.PORT || "443");

app.set("port", port);

const server = https.createServer(app);
const wss = new WebSocket.Server({ server });

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  debug("Listening on " + bind);
}

const dnsPromises = require("node:dns").promises;

async function getIpAddress(url) {
  try {
    const regex = /^(https?:\/\/)?/;
    const modifiedUrl = url.replace(regex, "");
    const { address, family } = await dnsPromises.lookup(modifiedUrl);

    return { targetIp: address, ipVersion: family };
  } catch (error) {
    console.error(error);
    return null;
  }
}

wss.on("connection", ws => {
  console.log("Client connected");

  ws.on("message", async message => {
    const { url } = JSON.parse(message);
    const ipAddress = await getIpAddress(url);
    const traceroute = await getTracerouteData(url);
    const pingData = [];
    const tracerouteData = [];

    pingData.push(await ping.getPing(ipAddress.targetIp, 10));

    traceroute.forEach(data => {
      tracerouteData.push(data);
    });

    ws.send(JSON.stringify({ pingData: pingData }));
    ws.send(JSON.stringify({ tracerouteData }));
    ws.send(JSON.stringify({ done: true }));
  });

  ws.on("close", () => {
    console.log("Client disconnected");
  });

  ws.on("error", error => {
    console.error("WebSocket error:", error);
  });
});

console.log("Server is running on port", port);
